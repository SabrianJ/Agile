
<!-- <script src="https://cdn.jsdelivr.net/npm/evo-calendar@1.1.2/evo-calendar/js/evo-calendar.min.js"></script> -->




<script async
  src="https://maps.googleapis.com/maps/api/js?key=AIzaSyADEpRHtEOhgdpt4OUefFTUhsxTH7wALSQ&libraries=geometry,places&callback=initMap">
</script>

<script src="/evo-calendar.js" charset="utf-8"></script>

<% if(user.type == "Dog Owner"){ %>
  <script>
          var activity = <%- JSON.stringify(foundActivity); %>
          var training = <%- JSON.stringify(foundTraining); %>

          const months = {
            0: 'January',
            1: 'February',
            2: 'March',
            3: 'April',
            4: 'May',
            5: 'June',
            6: 'July',
            7: 'August',
            8: 'September',
            9: 'October',
            10: 'November',
            11: 'December'
          }

          $(document).ready(function() {
              $('#calendar').evoCalendar({
                  'eventHeaderFormat': 'MM dd',
                  'theme': 'Royal Navy',
                  'todayHighlight' : true
              })

              for(var i=0 ; i < activity.length ; i++){
                var date = new Date(activity[i].dateTime);
                var currentMonth = months[date.getMonth()];

                $('#calendar').evoCalendar('addCalendarEvent', {
                    id: activity[i]._id,
                    name: activity[i].name,
                    description: activity[i].description,
                    location: activity[i].location,
                    date: currentMonth + " " + date.getDate() + ", " + date.getFullYear(),
                    type: 'activity'
                });
              }

              for(var i=0 ; i < training.length ; i++){
                var date = new Date(training[i].dateTime);
                var currentMonth = months[date.getMonth()];

                $('#calendar').evoCalendar('addCalendarEvent', {
                    id: training[i]._id,
                    name: training[i].name,
                    description: training[i].description,
                    location: training[i].location,
                    date: currentMonth + " " + date.getDate() + ", " + date.getFullYear(),
                    type: 'training'
                });
              }

          });

          function calculateDistance(){
            if(directionsDisplay != null) {
              directionsDisplay.setMap(null);
              directionsDisplay = null;
          }

            directionsService = new google.maps.DirectionsService();
            directionsDisplay = new google.maps.DirectionsRenderer(
              {
                suppressMarkers: true,
                suppressInfoWindows: true
              });

          directionsDisplay.setMap(map);
          var lat1 = coordinate.lat();
          var lng1 = coordinate.lng();
          var lat2 = marker2.position.lat();
          var lng2 = marker2.position.lng();
          var request = {
            origin: {lat: lat1, lng: lng1},
            destination: {lat: lat2, lng: lng2},
            travelMode: google.maps.DirectionsTravelMode.DRIVING
          };
          directionsService.route(request, function(response, status)
          {
          if (status == google.maps.DirectionsStatus.OK)
          {
          directionsDisplay.setDirections(response);
          let distance;
          distance = "The distance between the two points on the fastest route is: "+response.routes[0].legs[0].distance.text;
          distance += ". The aproximative driving time is: "+response.routes[0].legs[0].duration.text;
          document.getElementById("distanceInfo").innerHTML = distance;

          }
          });
          }


          function CalculateControl(calculateDIV) {
            // Set CSS for the control border.
            const controlUI = document.createElement("div");

            controlUI.style.backgroundColor = "#fff";
            controlUI.style.border = "2px solid #fff";
            controlUI.style.borderRadius = "3px";
            controlUI.style.boxShadow = "0 2px 6px rgba(0,0,0,.3)";
            controlUI.style.cursor = "pointer";
            controlUI.style.marginTop = "8px";
            controlUI.style.marginBottom = "22px";
            controlUI.style.textAlign = "center";
            controlUI.title = "Click to calculate distance";
            calculateDIV.appendChild(controlUI);

            // Set CSS for the control interior.
            const controlText = document.createElement("div");

            controlText.style.color = "rgb(25,25,25)";
            controlText.style.fontFamily = "Roboto,Arial,sans-serif";
            controlText.style.fontSize = "16px";
            controlText.style.lineHeight = "38px";
            controlText.style.paddingLeft = "5px";
            controlText.style.paddingRight = "5px";
            controlText.innerHTML = "Calculate";
            controlUI.appendChild(controlText);

            // Setup the click event listeners: simply set the map to Chicago.
            controlUI.addEventListener("click", () => {
              calculateDistance();
            });
          }


          function ShowEventControl(){
            const activityDiv = document.createElement("div");
            ActivityControl(activityDiv);
            map.controls[google.maps.ControlPosition.TOP_CENTER].push(activityDiv);

            const trainingDiv = document.createElement("div");
            TrainingControl(trainingDiv);
            map.controls[google.maps.ControlPosition.TOP_CENTER].push(trainingDiv);
          }

          function ActivityControl(activityDiv){
            const activityUI = document.createElement("div");

            activityUI.style.backgroundColor = "#fff";
            activityUI.style.border = "2px solid #fff";
            activityUI.style.borderRadius = "3px";
            activityUI.style.boxShadow = "0 2px 6px rgba(0,0,0,.3)";
            activityUI.style.cursor = "pointer";
            activityUI.style.marginTop = "8px";
            activityUI.style.marginBottom = "22px";
            activityUI.style.textAlign = "center";
            activityUI.title = "Click to show activity";
            activityDiv.appendChild(activityUI);

            const activityText = document.createElement("div");

            activityText.style.color = "rgb(25,25,25)";
            activityText.style.fontFamily = "Roboto,Arial,sans-serif";
            activityText.style.fontSize = "16px";
            activityText.style.lineHeight = "38px";
            activityText.style.paddingLeft = "5px";
            activityText.style.paddingRight = "5px";
            activityText.innerHTML = "Activity";
            activityUI.appendChild(activityText);

            // Setup the click event listeners: simply set the map to Chicago.
            activityUI.addEventListener("click", () => {
              showActivity();
            });
          }

          function showActivity(){

          }

          function TrainingControl(trainingDiv){
            const trainingUI = document.createElement("div");

            trainingUI.style.backgroundColor = "#fff";
            trainingUI.style.border = "2px solid #fff";
            trainingUI.style.borderRadius = "3px";
            trainingUI.style.boxShadow = "0 2px 6px rgba(0,0,0,.3)";
            trainingUI.style.cursor = "pointer";
            trainingUI.style.marginTop = "8px";
            trainingUI.style.marginBottom = "22px";
            trainingUI.style.textAlign = "center";
            trainingUI.title = "Click to show training";
            trainingDiv.appendChild(trainingUI);

            const trainingText = document.createElement("div");

            trainingText.style.color = "rgb(25,25,25)";
            trainingText.style.fontFamily = "Roboto,Arial,sans-serif";
            trainingText.style.fontSize = "16px";
            trainingText.style.lineHeight = "38px";
            trainingText.style.paddingLeft = "5px";
            trainingText.style.paddingRight = "5px";
            trainingText.innerHTML = "Training";
            trainingUI.appendChild(trainingText);

            // Setup the click event listeners: simply set the map to Chicago.
            trainingUI.addEventListener("click", () => {
              showTraining();
            });
          }

          function showTraining(){
            console.log("lol");
          }


          // var active_events = $('#calendar').evoCalendar('getActiveEvents');
          // console.log(active_events);


  </script>
<% }else{ %>
  <script>
          var event = <%- JSON.stringify(foundEvent); %>
          var training = <%- JSON.stringify(foundTraining); %>

          const months = {
            0: 'January',
            1: 'February',
            2: 'March',
            3: 'April',
            4: 'May',
            5: 'June',
            6: 'July',
            7: 'August',
            8: 'September',
            9: 'October',
            10: 'November',
            11: 'December'
          }

          $(document).ready(function() {
              $('#calendar').evoCalendar({
                  'eventHeaderFormat': 'MM dd',
                  'theme': 'Royal Navy',
                  'todayHighlight' : true
              })

              for(var i=0 ; i < event.length ; i++){
                var date = new Date(event[i].dateTime);
                var currentMonth = months[date.getMonth()];

                $('#calendar').evoCalendar('addCalendarEvent', {
                    id: event[i]._id,
                    name: event[i].name,
                    description: event[i].description,
                    location: event[i].location,
                    date: currentMonth + " " + date.getDate() + ", " + date.getFullYear(),
                    type: 'event'
                });
              }

              for(var i=0 ; i < training.length ; i++){
                var date = new Date(training[i].dateTime);
                var currentMonth = months[date.getMonth()];

                $('#calendar').evoCalendar('addCalendarEvent', {
                    id: training[i]._id,
                    name: training[i].name,
                    description: training[i].description,
                    location: training[i].location,
                    date: currentMonth + " " + date.getDate() + ", " + date.getFullYear(),
                    type: 'training'
                });
              }

          });
  </script>


<% } %>

</body>

<!-- Footer -->
<footer class="sticky-footer bg-white">
    <div class="container my-auto">
        <div class="copyright text-center my-auto">
            <span>Copyright Woof 2021 Barbara Ferreira, Sabrian Jufenlindo, Jessalyn Huang</span>
        </div>
    </div>
</footer>
<!-- End of Footer -->

</html>
